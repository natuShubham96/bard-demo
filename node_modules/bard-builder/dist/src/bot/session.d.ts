import Message from "../gateway/message";
import Gateway from "../gateway/gateway";
import Emitter from "./emitter";
export interface Progress {
    node: string;
    step: number;
}
export interface ProgressData {
    current: Progress;
    detached: Progress[];
}
export interface StorageData<State> {
    progress: ProgressData;
    state: State;
    timestamp: number;
    expiration: number;
}
export default class Session<State extends ObjectLiteral> {
    private static readonly EXPIRATION;
    state: State;
    need_sync: boolean;
    token: string;
    origin: string;
    gateway: Gateway;
    emitter: Emitter;
    message: Message | null;
    contact: string;
    vendor: string;
    active: boolean;
    status: boolean;
    progress: ProgressData;
    timestamp: number;
    constructor(token: string, origin: string, state: State, gateway: Gateway, emitter: Emitter);
    isActive(): boolean;
    getStatus(): boolean;
    getProgress(): ProgressData;
    getMessage(): Message;
    getContact(): string;
    getVendor(): string;
    getStorageData(): StorageData<State>;
    isExpired(): boolean;
    setActive(value: boolean): boolean;
    setStatus(value: boolean): boolean;
    setMessage(value: Message): Message;
    setContact(value: string): string;
    setVendor(value: string): string;
    setProgress(progress: ProgressData): (Error | null);
    setTimestamp(value: number): number;
    refresh(): number;
    send(data: any): Promise<string>;
    end(): boolean;
}
