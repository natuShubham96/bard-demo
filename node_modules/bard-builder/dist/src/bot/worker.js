"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const uuid_1 = require("uuid");
const vow_1 = __importDefault(require("../utils/vow"));
class Worker {
    constructor(operation, settings) {
        this.operation = operation;
        this.settings = settings;
        this.token = (0, uuid_1.v4)();
        this.status = false;
    }
    start() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.status)
                throw new Error("Worker already started");
            setImmediate(() => this.run());
            return this.status = true;
        });
    }
    stop() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.status)
                throw new Error("Worker not started yet");
            return this.status = false;
        });
    }
    run() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.status)
                return false;
            const result = yield vow_1.default.handle(this.operation(this.token));
            if (result instanceof Error) {
                return setTimeout(() => this.run(), ((_a = this.settings) === null || _a === void 0 ? void 0 : _a.delay) || Worker.DELAY);
            }
            return setImmediate(() => this.run());
        });
    }
}
exports.default = Worker;
Worker.DELAY = 250;
//# sourceMappingURL=worker.js.map