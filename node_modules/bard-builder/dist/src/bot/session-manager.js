"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const session_1 = __importDefault(require("./session"));
const vow_1 = __importDefault(require("../utils/vow"));
class SessionManager {
    constructor(settings, emitter, gateway) {
        this.storage = settings.storage;
        this.bot_name = settings.bot_name;
        this.state = settings.state;
        this.emitter = emitter;
        this.gateway = gateway;
        this.sessions = new Map();
    }
    get(token) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.storage)
                return this.sessions.get(token);
            const result = yield vow_1.default.handle(this.storage.get(token));
            if (result instanceof Error)
                throw new Error(`Storage 'get' error: '${result.message}'`);
            if (!result)
                return;
            const session = new session_1.default(token, this.bot_name, result.state, this.gateway, this.emitter);
            session.setProgress(result.progress);
            session.setTimestamp(result.timestamp);
            return session;
        });
    }
    create(token) {
        return __awaiter(this, void 0, void 0, function* () {
            const session = new session_1.default(token, this.bot_name, this.state, this.gateway, this.emitter);
            if (!this.storage)
                this.sessions.set(token, session);
            return session;
        });
    }
    sync(token, session) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.storage)
                return;
            if (!(session === null || session === void 0 ? void 0 : session.need_sync))
                return;
            const result = yield vow_1.default.handle(this.storage.set(token, session.getStorageData()));
            if (result instanceof Error)
                throw new Error(`Storage 'sync' error: '${result.message}'`);
            session.need_sync = false;
        });
    }
    delete(token) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.storage) {
                const result = yield vow_1.default.handle(this.storage.set(token));
                if (result instanceof Error)
                    throw new Error(`Storage 'delete' error: '${result.message}'`);
            }
            this.sessions.delete(token);
        });
    }
}
exports.default = SessionManager;
//# sourceMappingURL=session-manager.js.map