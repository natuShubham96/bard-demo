import { LogLevel } from "../utils/logger";
import { Chain, StepFunction } from "../flow/definition";
import Session, { StorageData } from "./session";
import Message from "../gateway/message";
import Course from "../flow/course";
import { EmitterEvents, ActionFunction } from "./emitter";
import { Storage as SessionManagerStorage } from "./session-manager";
export { EmitterEvents as Events };
export { Message };
export { Chain, StepFunction };
export { Session, StorageData, Course };
interface Settings<State> {
    name?: string;
    state: State;
    log_level?: LogLevel;
    session_storage?: SessionManagerStorage;
}
export declare class Bot<State extends ObjectLiteral = ObjectLiteral> {
    private static readonly WORKER_DELAY;
    private name;
    private state;
    private log_level?;
    private flow;
    private session_manager;
    private emitter;
    private gateway;
    private worker;
    private status;
    constructor(settings: Settings<State>);
    start(): Promise<boolean>;
    stop(): Promise<boolean>;
    signature(): () => any;
    incoming(name: string, chain: Chain): Error | null;
    trailing(name: string, chain: Chain): Error | null;
    outgoing(name: string, chain: Chain): Error | null;
    event(event: EmitterEvents, action: ActionFunction): Error | null;
    push(message: Message): Error | null;
    pull(): (Message | Error);
    private consume;
    private execute;
}
