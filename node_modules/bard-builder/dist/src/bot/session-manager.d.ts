import Session, { StorageData } from "./session";
import Gateway from "../gateway/gateway";
import Emitter from "./emitter";
export interface Storage {
    get: (token: string) => Promise<StorageData<ObjectLiteral> | undefined>;
    set: (token: string, data?: StorageData<ObjectLiteral>) => Promise<void>;
}
interface Settings {
    bot_name: string;
    state: ObjectLiteral;
    storage?: Storage;
}
declare class SessionManager {
    storage?: Storage;
    private bot_name;
    private state;
    private emitter;
    private gateway;
    private sessions;
    constructor(settings: Settings, emitter: Emitter, gateway: Gateway);
    get(token: string): Promise<Session<ObjectLiteral> | undefined>;
    create(token: string): Promise<Session<ObjectLiteral>>;
    sync(token: string, session: Session<ObjectLiteral>): Promise<void>;
    delete(token: string): Promise<void>;
}
export default SessionManager;
