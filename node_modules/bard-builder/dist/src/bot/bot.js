"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Bot = exports.Course = exports.Session = exports.Message = exports.Events = void 0;
const uuid_1 = require("uuid");
const vow_1 = __importDefault(require("../utils/vow"));
const logger_1 = __importDefault(require("../utils/logger"));
const flow_1 = __importStar(require("../flow/flow"));
const gateway_1 = __importDefault(require("../gateway/gateway"));
const session_1 = __importDefault(require("./session"));
exports.Session = session_1.default;
const message_1 = __importDefault(require("../gateway/message"));
exports.Message = message_1.default;
const course_1 = __importDefault(require("../flow/course"));
exports.Course = course_1.default;
const worker_1 = __importDefault(require("./worker"));
const emitter_1 = __importStar(require("./emitter"));
Object.defineProperty(exports, "Events", { enumerable: true, get: function () { return emitter_1.EmitterEvents; } });
const session_manager_1 = __importDefault(require("./session-manager"));
class Bot {
    constructor(settings) {
        this.name = (settings === null || settings === void 0 ? void 0 : settings.name) || `bot-#${(0, uuid_1.v4)()}`;
        this.state = settings.state || {};
        this.log_level = settings === null || settings === void 0 ? void 0 : settings.log_level;
        this.flow = new flow_1.default();
        this.emitter = new emitter_1.default();
        this.gateway = new gateway_1.default();
        this.session_manager = new session_manager_1.default({ storage: settings === null || settings === void 0 ? void 0 : settings.session_storage, bot_name: this.name, state: this.state }, this.emitter, this.gateway);
        this.worker = new worker_1.default(() => this.consume(), { delay: Bot.WORKER_DELAY });
        this.status = false;
        if (this.log_level)
            logger_1.default.enable(this.log_level);
    }
    start() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.status)
                return false;
            this.status = true;
            const nodes = this.flow.getNodes();
            if (nodes instanceof Error) {
                this.stop();
                throw new Error("Can't get any flow nodes");
            }
            if (!this.worker.start()) {
                return this.stop();
            }
            return true;
        });
    }
    stop() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.status)
                return false;
            this.status = false;
            yield vow_1.default.handle(this.worker.stop());
            return true;
        });
    }
    signature() {
        return this.signature;
    }
    incoming(name, chain) {
        if (this.status)
            throw new Error("Can't insert node after startup");
        return this.flow.insertNode(name, chain, flow_1.FlowTypes.INCOMING);
    }
    trailing(name, chain) {
        if (this.status)
            throw new Error("Can't insert node after startup");
        return this.flow.insertNode(name, chain, flow_1.FlowTypes.TRAILING);
    }
    outgoing(name, chain) {
        if (this.status)
            throw new Error("Can't insert node after startup");
        return this.flow.insertNode(name, chain, flow_1.FlowTypes.OUTGOING);
    }
    event(event, action) {
        if (this.status)
            throw new Error("Can't insert event after startup");
        return this.emitter.set(event, action);
    }
    push(message) {
        if (!this.status)
            throw new Error("Can't insert event before startup");
        return this.gateway.pushIncoming(message);
    }
    pull() {
        if (!this.status)
            throw new Error("Can't insert event before startup");
        return this.gateway.pullOutgoing();
    }
    consume() {
        return __awaiter(this, void 0, void 0, function* () {
            const message = this.gateway.pullIncoming();
            if (message instanceof Error) {
                throw new Error(`Consuming error: '${message.message}'`);
            }
            const result = yield vow_1.default.handle(this.execute(message));
            if (result instanceof Error) {
                throw new Error(`Consuming error: '${result.message}'`);
            }
            return true;
        });
    }
    execute(message) {
        return __awaiter(this, void 0, void 0, function* () {
            const stamp = message.session;
            if (!stamp.length)
                throw new Error("Invalid or missing Message session token");
            let session = yield vow_1.default.handle(this.session_manager.get(stamp));
            if (session instanceof Error)
                throw new Error(`Can't get session: '${session.message}'`);
            if (session && session.isActive()) {
                this.gateway.pushIncoming(message);
                throw new Error("Session already active");
            }
            if (session && session.isExpired()) {
                this.emitter.execute(emitter_1.EmitterEvents.ON_EXPIRE_SESSION, { session });
                this.emitter.execute(emitter_1.EmitterEvents.ON_DELETE_SESSION, { session });
                session = undefined;
                const deleted = yield vow_1.default.handle(this.session_manager.delete(stamp));
                if (deleted instanceof Error)
                    throw new Error(`Can't delete session: '${deleted.message}'`);
            }
            if (!session) {
                session = yield vow_1.default.handle(this.session_manager.create(stamp));
                if (session instanceof Error)
                    throw new Error(`Can't create session: '${session.message}'`);
                this.emitter.execute(emitter_1.EmitterEvents.ON_CREATE_SESSION, { session });
                const nodes = this.flow.getNodes();
                if (nodes instanceof Error)
                    throw new Error("Can't get flow nodes");
                const node = nodes.values().next().value;
                if (!node)
                    throw new Error("Can't get flow node");
                session.setProgress({ current: { node: node.name, step: 0 }, detached: [] });
            }
            session.setContact(message.contact);
            if (message.vendor != null)
                session.setVendor(message.vendor);
            session.setMessage(message);
            session.refresh();
            this.emitter.execute(emitter_1.EmitterEvents.ON_RECEIVE_MESSAGE, { session, message });
            this.emitter.execute(emitter_1.EmitterEvents.ON_REFRESH_SESSION, { session });
            session.setActive(true);
            this.emitter.execute(emitter_1.EmitterEvents.ON_LOCK_SESSION, { session });
            const course = new course_1.default(this.flow, session);
            yield course.run();
            const sync = yield vow_1.default.handle(this.session_manager.sync(stamp, session));
            if (sync instanceof Error)
                throw new Error(`Can't sync session: '${session.message}'`);
            session.setActive(false);
            this.emitter.execute(emitter_1.EmitterEvents.ON_UNLOCK_SESSION, { session });
            if (!session.getStatus()) {
                this.emitter.execute(emitter_1.EmitterEvents.ON_DELETE_SESSION, { session });
                session = undefined;
                const deleted = yield vow_1.default.handle(this.session_manager.delete(stamp));
                if (deleted instanceof Error)
                    throw new Error(`Can't delete session: '${deleted.message}'`);
            }
            return true;
        });
    }
}
exports.Bot = Bot;
Bot.WORKER_DELAY = 250;
//# sourceMappingURL=bot.js.map